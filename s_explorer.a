
	!src "..\godoslib.lib"
	*= $c000

; ------------------------------------------------ 
;
; sys.Explorer
; goDos System App for File Management
;
; 1.00, 06.10.17
;
; ------------------------------------------------ 


; ------------------------------------------------ Declarations

	pport		= $01
	indent		= 6
	maxdir		= 21		; Wert für ls_dlines (Standard: 16)

	ui_cacheflg	= $2a
	passover		= $30		; /$31
	zeile		= $32
	sdrive		= $36
	ddrive		= $37
	dirflg		= $38
	counter		= $39		; /$3a
	stmerk		= $3b
	xcnt		= $3c
	blcnt		= $3d		; /$3e
	dirwins		= $3f
	dirend		= $40
	numblks		= $41
	maxblks		= $42
	nextvalid		= $43

	byte		= $a3
	fcolor		= $ac
	tab		= $b0
	czeile		= sc_merk
	cspalte		= sc_merk+1
	offx		= ls_adrmisc
	offy		= offx+1

	shift		= $028d
	devs		= $0fa2

	sdw10		= $1558		; part of se_scup/dwn
	ui_fill		= $17e0		; Fill Screen /w checkered backgr
	ui_mainscr	= $1811		; U&I MainScreen
	patch2		= $1935		; Load APP to SYS
	patch1		= $1b02		; don't use status window
	dir4		= $1b69		; part of gd_dir
	dspalte		= $1db3		; system dir window indent
	ui_mods		= $1e61
	ui_apps		= $1805
	bindex		= $1c43

	block		= sy_global	; system dir buffers
	ftrack		= block+96
	dirbuffer		= sy_bigbuffer
	dirname		= dirbuffer+5
	blksfree		= dirbuffer+32
	filetype		= dirbuffer+54
	fftrack		= dirbuffer+160
	nexttop		= $be00		; dirbuffer+256
	tagbuffer		= $b500
	sysdirbuf		= $bf00
	buffer		= ui_vcache	; transport buffer (1 block)

	sprite		= $d015
	rahmen		= $d020
	ciout		= $ffa8
	load		= $ffd5
	clrall		= $ffe7

; ------------------------------------------------ Header

	jmp start
	!by $40			; system module
	!by $00,$00
	!wo modend
	!wo 0
	!pet "U&I Explorer    "
	!pet "1.00"
	!pet "06.10.17"
	!pet "A.Dettke        "

; ----------------------------------------- Main

start	lda #0
	sta ls_dirmask
	sta movefl
	sta pantgl
	lda ls_dlines
	pha

	ldx osdrive
	stx sdrive
	ldx oddrive
	stx ddrive
	ldy #22
	ldx #maxdir
	jsr setmax
	lda #4
	sta maxblks
	ldx ls_flen
	stx aflen
	ldx ls_showfiles
	stx afiles
	ldx ls_drive
	stx adrive	; aktueller Drive: 12? (RAM)
	cpx #12
	bne st01
	ldx ls_bootdrive	; dann: Bootdrive
st01	sta ls_flen	; .a=0
	lda sdrive
	bne st0
	txa 
st0	sta sdrive	; Source Drive setzen
	sta ls_showfiles	; Show all aktivieren
	lda ddrive
	bne st1
	txa 
st1	sta ddrive	; Destination Drive setzen

	jsr uiout		; Explorer-Oberfläche ausgeben

	lda #$60		; Patch: RTS
	sta patch1	; (Floppy-Statusanzeige verhindern)
	sta patch3	; (ersten Count verhindern)
	jsr shddrv
	jsr sevsdrive	; Source Drive: Info
	jsr getdirall	; Komplett-Dir holen
	jsr cntfiles	; Files zählen
	jsr cmpflen	; Längen in ersten Panel anzeigen
	jsr chkdrvpar	; System Dir Records holen
	lda #$4c
	sta patch3
	lda sdrive	; erster Start?
	eor ddrive
	bne +
	jsr desthead	; ja, Destination: Dummy-Daten setzen

+	lda gd_modswitch
	sta aswitch
	jsr gd_eloop	; wait for clicks

	pla
	sta ls_dlines
	lda #$4c		; Unpatch: JMP
	sta patch1
	lda adrive	; dann: alles restaurieren
	sta ls_drive
	lda aflen
	sta ls_flen
	lda afiles
	sta ls_showfiles
	lda aswitch
	sta gd_modswitch

; ------------------------------------------------ Event: Leave Module

sevquit	lda #$1e		; Hochpfeile rekonstruieren
sq1	sta paneltx+1
	sta paneltx+2
	lda sdrive
	sta osdrive
	lda ddrive
	sta oddrive
	sec 		; leave module
	rts 

; ------------------------------------------------ Event: Stay in Module

stay	jsr gd_spron
	clc		; don't leave
	rts

; ------------------------------------------------ Event: Choose an APP

sevapps	lda #16		; Systemwert für dlines
	sta ls_dlines
	lda #2
	sta patch2
	jsr cache
	jsr svscreen
	jsr ev_app
	dec patch2
	bne svm0

; ------------------------------------------------ Event: Choose a Module

sevmods	lda #16		; Systemwert für dlines
	sta ls_dlines
	jsr cache
	jsr svscreen
	jsr ui_mods
svm0	ldx maxdlines
	jsr setdls
	jsr ev_cache
	ldx #0
	stx ls_dirmask
	lda list
	sta sc_screenvek
	lda list+1
	sta sc_screenvek+1
	clc
	rts

; ------------------------------------------------ Service Routines

cache	ldx #0
	stx ui_cacheflg
	jmp ev_cache

svscreen	lda sc_screenvek
	sta list
	lda sc_screenvek+1
	sta list+1
	rts

; ------------------------------------------------ Text Output Handler

settab	lda #<(tabigad)
	sta sc_texttab
	lda #>(tabigad)
	sta sc_texttab+1
	rts 

tabigad	!wo sdrv		;  0 Source Unit
	!wo ddrv		;  2 Destination Unit
	!wo header	;  4 Title Bar
	!wo stay		;  6 Source Selector
	!wo stay		;  8 Destination Selector
	!wo blks		; 10 Blocks Free
	!wo enoth		; 12 Error: Nothing selected
	!wo enosp		; 14 Error: Not enough space
	!wo eons		; 16 Error on Source
	!wo eond		; 18 Error on Destination
	!wo eopd		; 20 Error on Open
	!wo scrollbar	; 22 Colorize Scrollbar
	!wo footer	; 24 Output Footer
	!wo btx		; 26 Output Footer (bl./blocks)
	!wo blank		; 28 Output Footer (blanks)
	!wo drtype	; 30 Output Footer (drivetype)
	!wo dheader	; 32 Output panel 2 dheader
	!wo dfooter	; 34 Output panel 2 dfooter
	!wo filesbox	; 36 Output filesbox colors
	!wo fout		; 38 Output Files
	!wo tout		; 40 Output Tagged Files

; ------------------------------------------------ Show Unit Number

shsdrv	ldy #0
	lda sdrive	; select source
	bne sh0

shddrv	ldy #2
	lda ddrive	; select destination

sh0	sty which
	pha 
	ldx #0
	stx sc_loop
	jsr settab
	jsr ui_gettab
	pla 
	jsr gd_xcnvdez
	ldy #8		; Unit-Number eintragen
	sta (sc_screentab),y
	txa 
	dey 
	sta (sc_screentab),y
	ldy #6
	jmp gd_xtxout1	; und anzeigen

; ------------------------------------------------ Event: Exchange Drives

sevxdrvs	lda ls_flen
	beq +
	jsr cnva6
+	lda ls_drive
	eor sdrive
	beq +
	jsr sevsdrive
+	ldx sdrive	; Drive-Nummer tauschen
	lda ddrive
	sta sdrive	; dst ist jetzt src
	sta ls_drive
	stx ddrive
	jsr desthead	; Dest-Angaben umkopieren
	jsr getdirall	; Src neu einlesen
	jsr cntfiles	; Dateien zählen
	jsr shddrv
	jsr sevsdrive
	jmp cmpflen

; ------------------------------------------------ Event: Select Source Drive

sevsdslct	ldx #0
	!by $2c
sevddslct	ldx #1
	lda drvrows,x
	sta passover
	lda sdrive,x
	sta passover+1
	lda gd_modswitch
	pha
	jsr ev_drvslct
	pla
	sta gd_modswitch
	jsr ev_cache	; .x=0
	ldy passover+1
	lda #12
	cmp passover
	bcs +
	sty ddrive
	bne sevddrive
+	sty sdrive
	sty ls_drive
	jsr getdirall
	bcc +
	jmp err40
+	jsr cntfiles

; ------------------------------------------------ Event: Reload Source Drive

sevsdrive	ldx #0
	ldy sdrive

sdr0	tya 
	sta ls_drive
	sta sdrive,x
	jsr gd_sproff
	sta ls_flen
	sta dirwins	; Zähler für Dir-Fenster auf 0 (für Filelängenanzeige)
	sta dirend	; Ende des Directory auf 0
	sta nextvalid
	txa 
	beq sdr1

	jsr shddrv	; Dst: Unit-Number hilighten
	jsr dirinfo
	jsr getdsklen
	jmp ddir		; Inhalt

sdr1	jsr shsdrv	; Src: Unit-Number hilighten
	jsr dirinfo
	jsr sdir		; Inhalt
patch3	jmp cmpflen	; Längen anzeigen

getdsklen	lda blksfree	; Disk-Restlänge merken
	sta disklen
	lda blksfree+1
	sta disklen+1
	rts

; ------------------------------------------------ Event: Select Destinaton Drive

sevddrive	jsr swap
	ldx #1
	ldy ddrive
	jsr sdr0
	jsr desthead
	jmp swap

desthead	ldx #25
-	lda dskname,x
	sta ddskname,x
	lda bfree,x
	sta dbfree,x
	dex
	bpl -
	lda pantgl	; wenn sichtbar:
	bne +		; anzeigen
	rts		; sonst nicht

+	ldy #32		; Panel 2 Header
	jsr out1
	ldy #34		; Panel 2 Footer
out1	jsr settab
	jsr ui_gettab
	ldy #6
	jmp gd_xtxout1

; ------------------------------------------------ Count Files on Source

cntfiles	lda #$02
	jsr initcntf
	sta filestx	; .a=32, .y=0
	sta filestx+1
	sta fouttx
	sta fouttx+1
-	jsr bindex+2
	sta ls_index	; .a: added index
	bcc alldbuf
	inc alldbuf+2
alldbuf	ldy sy_4bit,x	; count until no space anymore
	cpy #32
	bne +
	inc counter
	bne -
	inc counter+1
	bne -
+	ldx counter
	lda counter+1
	stx numfiles
	sta numfiles+1
	jsr cntbl
	dey
	ldx #2
-	lda sy_numbers,y
	sta filestx,x
	sta fouttx,x
	dex
	dey
	bpl -
	ldy #38
	jmp out2

; ------------------------------------------------ Compute File Lengths

cmpflen	lda #0
	jsr initcntf
cudflen	lda ls_drive
	cmp sdrive
	beq +
	jmp cfe0
+	jsr prepdwin
	lda dirwin
	sta zeile

--	lda #32		; init first 3 digits to space
	sta sc_movetab
	sta sc_movetab+1
	sta sc_movetab+2
	sta sc_merk
	jsr setloc	; relocate cursor
	jsr gd_initmove
	jsr bindex+2	; retrieve dir entry
	tay
	sta ls_index
	bcc +
	inc ls_adrmisc+1	; Vektor in dirbuffer
+	lda (ls_adrmisc),y	; Länge lo: .x
	tax
	iny
	lda (ls_adrmisc),y	; Länge hi: .a
	pha

	iny
	lda (ls_adrmisc),y	; next byte: space?
	sta nextvalid

	lda dirend	; erster Durchlauf?
	beq +
	cmp #32		; Ende schon gefunden?
	bne ++		; ja, kein neuer Check
+	tya		; sonst: nächsten Dir-Entry checken
	clc
	adc #32
	tay		; ist im nächsten Block?
	bcs ++
	lda (ls_adrmisc),y	; nein, "blocks free" gefunden? ("b" oder " ")
	sta dirend	; ja, Ende des Directory, wenn nicht Space

++	pla		; .x: lo, .a: hi
	jsr cntbl		; generate digits

	ldx #4		; max. 4 digits right bound
	sta sc_movetab,x	; .a=0
	bne +
-	lda sy_numbers,y
	sta sc_movetab,x
+	dex
	dey
	bpl -
	jsr setloc
	lda block+$3e
	sta numblks
	lda nextvalid
	cmp #$42		; ("b"?)
	beq ++
	cmp #32
	bne +
	jsr gd_xtxout3	; .x=0
	inc zeile
	inc counter
	lda counter
	cmp ls_dlines
	bne --

+	lda dirend
	cmp #$42		; "b"? (Ende gefunden)
	bne cfe0
++	ldx #$ff		; ja, .x=$ff
	stx dirend	; dirend valid (negativ)
	lda numblks
	cmp maxblks
	bcc cfe0
	dec dirwins

cfe0	clc
	rts

setloc	lda zeile
	ldx dirwin+1
	ldy #6
	jsr gd_setpar
	jmp gd_trim

; ------------------------------------------------ 

initcntf	sta ls_index	; .a: base offset into first record
	lda #>sy_4bit	; count files starting from $402x
	sta alldbuf+2
	sta ls_adrmisc+1
	lsr		; Step: 32
	sta sc_merk
	ldy #0
	sty alldbuf+1
	sty ls_adrmisc
initcud	sty counter
	sty counter+1
	rts

; ------------------------------------------------ Directory of Destination

ddir	ldy ddrive	; Dirfenster Destination löschen
	bne sdir0

; ------------------------------------------------ Directory of Source

sdir	ldy sdrive	; Source
sdir0	lda #indent
	sta dspalte	; System-Indent fürs Dir-Fenster ändern
	sty ls_drive
	lda sdrv
	jsr prepdir	; Fenster löschen
	dec sc_zl
	jsr gd_dir	; System-Directory (Inhalt)
	jsr svftrack	; save system track list
	lda ls_track
	sta block+$3d
	lda ls_first
	sta block+$3f
sdir3	lda ls_cblocks
	sta block+$3e
sdir1	lda #5		; System-Indent restaurieren
	sta dspalte
	clc
	rts

; ------------------------------------------------ Dirfenster löschen

prepdir	jsr prepdwin
	dec sc_br		; Scrollbalken aussparen
	ldy #26
	jsr gd_blank	; .y Blanks erzeugen
	jsr gd_trim
	jsr gd_initmove
	ldx sc_ho
	jmp gd_fi1	; löschen

prepdwin	ldx #3		; Fensterparameter setzen
pd1	lda dirwin,x
	sta sc_descriptor,x
	dex 
	bpl pd1
	inx 
	stx sc_loop	; care for textscreen
	rts

; ------------------------------------------------ 

err	pla
	pla 
	jsr err8		; "ERROR" in title bar
	jsr cnva7		; Filenamenslänge auf 0
sterr	lda ls_drive	; aktuellen Drive anwählen
	jsr dirinfo	; Directory ausgeben
	jmp stay

; ------------------------------------------------ LOAD Directory Header

getdirall	lda #1		; 1 Zeichen ("$", complete dir)
	!by $2c
getdirin	lda #3		; 3 Zeichen ("$: ", gets empty dir)

; ------------------------------------------------ LOAD Directory Entry of a File

getfilin	pha 		; .a: Anzahl Zeichen
	jsr setblktx
	jsr gd_sproff
	pla
	pha
	ldx #<dollar	; LOAD "$:" (note: *with* colon!)
	ldy #>dollar
	jsr filnam
	lda #12		; Ch 12
	ldx ls_drive
	ldy #0
	jsr filpar
	pla
	cmp #1
	beq +
	ldy #>dirbuffer	; Teil-Dir in den Directory-Puffer
	!by $2c
+	ldy #>sy_4bit	; All-Dir nach 4Bit
	lda #0
	tax 
	sei 
	jsr load
	cli
	jmp gd_spron

; ------------------------------------------------ Get Diskname and Blocks Free

dirin	lda #32
	sta dirname
	sta dirbuffer+22
	lda #5		; 5: Offset auf Disknamen

; ------------------------------------------------ Get Filename and Filelength

filin	ldy #24		; .a: Offset auf Filenamen
	sty sc_br
	sta sc_texttab
	sta dirflg
	lda #>dirbuffer
	sta sc_texttab+1
di0	lda (sc_texttab),y	; Namen holen
	sta sc_movetab,y	; in Ausgabepuffer,
	sta sy_numbers,y	; in den Ziffernpuffer
	dey 
	bpl di0
	jsr gd_cnvbc	; nach BCode wandeln
	ldy #0
-	lda sc_movetab,y
	beq +
	sta dskname,y
	iny
	bne -
+	lda dirflg
	cmp #5
	beq +
	ldy #24		; File im Dir-Footer ausgeben
	!by $2c
+	ldy #4		; Disk im Dir-Header ausgeben
	jsr settab
	jsr ui_gettab
	jsr gd_xtxout3
	jmp getbl		; Blocks Free aufarbeiten

; ------------------------------------------------ 

dirinfo	jsr getdirin	; gewählten Eintrag im Directory laden
	bcc +
	pla
	pla
	jsr err8
	clc
	rts
+	jsr dirin
	tya 		; Offset auf Ende von Blocks-Free-String
	pha 

	ldx #4		; Blocks Free eintragen:
	ldy #0		; Source (Anfang)
	lda which		; oder
	beq di60
	ldy #0		; Destination (Anfang)
di60	lda #32
di6	sta bfree,y	; zuerst: löschen
	sta blocks,y
	iny 
	dex 
	bpl di6

	pla 		; dann: eintragen
	tay 
	dey 
	ldx #4
	lda which
	beq di3
	ldx #4
di3	lda sy_numbers,y
	sta bfree,x
	sta blocks,x
	dex 
	dey 
	bpl di3
	lda which
	bne di5
di4	jsr shsdrv	; show source
	jmp sel81
di5	jsr shddrv	; oder show destination
	jmp sel81

; ------------------------------------------------ Colorize Selector Windows

colorize	pha		; .a: Index auf Farbe
	jsr settab
	jsr ui_gettab	; .y: Index auf Ausgabe-Record
	pla
	tax
	jmp gd_fcol

; ------------------------------------------------ Create # of Blocks

getbl	ldx blksfree
	lda blksfree+1

cntbl	sta $62		; hi
	stx $63		; lo
	lda #$37		; BASIC on
	sta pport
	ldx #$90
	sec 
	jsr $bc49
	jsr $bddf
	dec pport		; BASIC off
	ldy #6
di2	dey 
	lda sy_numbers,y
	bne di2
	rts 

; ------------------------------------------------ 

cnva6	jsr sterr		; Directory akt. Drive
cnva7	ldy #0
cnva4	sty ls_flen
	clc 
	rts 

; ------------------------------------------------ Event: Select a File

sevselect	lda ls_drive	; Source angewählt?
	cmp sdrive
	beq +
srconly	jsr err41
	lda sdrive
	sta ls_drive
	jmp sterr
+	lda czeile	; Zeile, in der geklickt wurde
	sta sc_zl
	jsr gd_initmove	; umrechnen auf Screenadresse
sel0	lda (sc_vekt20),y	; was dort steht umkopieren
	sta sc_movetab,y	; in den Textausgabepuffer
	sta ls_nambuf,y	; und als Filenamen
	iny 
	cpy sc_br
	bne sel0
	ldy #1
	sty sc_ho
	jsr gd_invert
	ldy sc_br
sel1	dey 		; Leerzeichen hinten ausblenden
	lda sc_movetab,y
	cmp #32
	beq sel1
	iny
	bne sel4
	jsr gd_invert	; leeren Eintrag abweisen
	beq cnva4
sel4	sty sc_br		; gleich: Filenamenslänge
	sty ls_flen2
	lda #0
	sta ls_nambuf,y
	jsr gd_cnvasc	; Filenamen nach Petscii wandeln

	lda ls_nambuf	; Koala?
	cmp #$c1		; "A"? (Spades)
	bne sel41
	ldx #2
pic0	lda ls_nambuf+1,x	; "pic"? -> Koala-Name?
	cmp pic,x
	bne sel41		; nein
	dex 
	bpl pic0
	lda #$81		; sonst: Spades ersetzen
	sta ls_nambuf
	lda #32		; und Namen bis Länge 15 mit Space auffüllen
	sta ls_nambuf,y
	ldy #15
	sty ls_flen
	iny 

sel41	dey 
sel5	lda ls_nambuf,y
	sta dollar+2,y	; Namen für Dir eintragen
	sta scratch+2,y	; bei Scratch auch gleich mit
	sta wname,y	; und auch beim Writefile
	dey 
	bpl sel5
	clc 
	lda ls_flen	; Namenslänge um 2 erhöhen (Dos-Kommando vorne)
	adc #2
	pha 		; merken

	adc #2		; und nochmal um 2 für Writefile (",p,w")
	sta wflen
	lda sdrive
	sta ls_drive
	jsr shsdrv	; Source-Drivenummer ausgeben
	pla 

	jsr getfilin	; Dir-Eintrag f. diesen Filenamen holen
	bcc sel63
sel62	jmp cnva6		; bei Fehler: Diskmessage
sel63	ldy #0
sel61	lda filetype,y	; Filetype suchen (ab dieser Position)
	iny 
	cmp #32
	beq sel61
	sta wtype+1	; richtigen Filetype für OPEN einsetzen

	ldy #$22		; "b" von "blocks free"?
	lda dirbuffer,y
	cmp #$42
	beq sel62		; dann Fehler (File nicht gefunden)

sel6	iny 
	lda dirbuffer,y
	cmp #34		; öffnendes Anführungszeichen suchen
	bne sel6
	tya 		; Index in Dirbuffer auf den Namen setzen
	jsr filin		; Filenamen/Dateilänge holen
	lda blksfree	; Dateilänge aufbereiten:
	sta filelen
	lda blksfree+1
	sta filelen+1

	ldx #4
	lda #32		; Blocks-Anzeige löschen
sel7	sta blocks,x
	dex 
	bpl sel7 		; .y zeigt auf den Delimiter ($00)
	dey
	ldx #4		; und Dateilänge eintragen
sel8	lda sy_numbers,y
	sta blocks,x
	dex 
	dey 
	bpl sel8

	ldy #3
	ldx wflen
sel71	dex 
	lda wtype,y	; ",p,w" an Writefilenamen anhängen
	sta wname,x
	dey 
	bpl sel71

	lda dirflg
	cmp #5
	bne +

sel81	ldy #28		; blank out
	jsr sel84
	ldy #10		; Dateilänge anzeigen
sel82	jsr sel84
	ldy #30		; Drive-Typ anzeigen
	jsr sel84
	ldy #26		; "blocks" text
	jsr sel84

+	ldy #0		; Colorize riders
	jsr sel83		; Anzeige: drives
	ldy #2
	jsr sel83
drhilite	ldy which		; active gets hilighted
	bne +
	ldy #2		; src
	!by $2c
+	ldy #0		; dst
	lda #2
	jsr colorize
	ldy #4		; header
	jsr sel83
	ldy #24		; footer
sel83	lda #3		
	jmp colorize

sel84	jsr ui_gettab
	ldy #3
	jmp gd_xtxout1

; ------------------------------------------------ Fehler

nothing	ldy #12		; Nothing selected
	!by $2c
nospace	ldy #14		; Not enough space...
	jmp err7

; ------------------------------------------------ Event: Delete a File

sevdel	ldy ls_flen
	beq nothing
nameit	jsr gd_sproff	; Routine wird für Rename mitverwendet
	iny 
	iny 
	tya 
	ldx #<scratch	; Scratch File senden
	ldy #>scratch
	jsr gd_sendcom
	jsr cnva6
	lda ls_drive
	cmp sdrive
	bne +
	jsr getdirall
	jsr cntfiles
+	jmp sevsdrive

; ------------------------------------------------ Initialize

inull	ldx #<init	; "I0" senden
	ldy #>init
	lda #2
	jsr gd_sendcom
err9	lda ls_err2	; Rückmeldung checken
	and #15
err5	sec 
	rts 

; ------------------------------------------------ Open Source

sopen	lda #13		; 13,drive,13
	tay 
	ldx sdrive
	beq err5
	jsr filpar
	lda ls_temp
	ldx ls_vekta8
	ldy ls_vekta8+1
	bne op0

; ------------------------------------------------ Open Destination

dopen	lda #12		; 12,drive,12
	tay 
	ldx ddrive
	beq err5
	jsr filpar
	lda wflen
	ldx #<wname
	ldy #>wname
op0	jsr filnam
	jmp copen

; ------------------------------------------------ 

err400	jmp err40		; Err on Src
err410	jmp err41		; Err on Dest

; ------------------------------------------------ Event: Move a File

sevmove	lda #$80		; set flag for Move, then Copy:
	sta movefl

; ------------------------------------------------ Event: Copy a File

sevcopy	ldx ls_flen
	bne +
	jmp nothing
+	sec 
	lda disklen
	sbc filelen
	lda disklen+1
	sbc filelen+1
	bcs +
	jmp nospace
+	jsr gd_sproff
	sta shift
	lda #<(dollar+2)
	sta ls_vekta8
	lda #>(dollar+2)
	sta ls_vekta8+1
	stx ls_temp
	lda sdrive
	cmp ddrive
	beq err410
	sta ls_drive
	jsr sopen
	bcs err400

	lda ddrive
	sta ls_drive
	jsr check41	; 1541: force job to ok! (m-w 0 0 1 1)
	lda shift		; Shift/CTRL/C= gedrückt?
	beq sco1
	lda ls_flen
	pha 
	jsr sevdel	; dann on Destination löschen
	pla 
	sta ls_flen
	jsr gd_sproff
sco1	jsr inull
	bne err410
	jsr dopen
	bcs err410
	jsr err9
	beq sco02
	jmp err42
sco02	lda movefl
	beq sco03
	ldx #7		; "Move"
	!by $2c
sco03	ldx #0		; "Copy"
	asl 
	sta blcnt
	sta blcnt+1
	jsr tcopy
	lda filelen+1
	ldx filelen
	jsr steps
	jsr settab
	ldy #28
	jsr sel84

scloop	jsr action	; Gauge Activity
	ldx #13
	jsr chkin
	bcs err40
	ldx #0
scl0	jsr basin		; einen Block holen (Source)
	sta buffer,x
	inx 
	bit status
	bvs scl2
	txa 
	bne scl0
scl2	stx xcnt
	jsr clrch
	lda status
	sta stmerk
	ldx #12
	jsr ckout
	bcs err41
	ldx #0
scl1	lda buffer,x	; einen Block schreiben (Destination)
	jsr ciout
	inx 
	cpx xcnt
	bne scl1
	jsr clrch
	lda status	; Status ok?
	ora stmerk
	beq scloop	; dann nächster Block

	lda status	; fehlerfrei?
	and #$bf
	bne err41

	lda sdrive	; ja
	sta ls_drive
	jsr closeall
	jsr gd_sproff
	lda movefl	; Move?
	beq scl3
	jsr sevdel	; dann Source löschen
scl3	jsr sevddrive	; Directory of Dest Drive
	inx 
	stx movefl
	stx ls_flen
	jsr check41	; 1541: again Job-Reset
	jmp stay

; ------------------------------------------------ ERROR

err6	jsr sevsdrive
	jmp stay

closeall	lda #12
	jsr close
	lda #13
	jmp close

; ------------------------------------------------ Errors

err40	lda #16		; Error on Source
	!by $2c
err41	lda #18		; Error on Destination
	!by $2c
err42	lda #20		; Error opening Destination
	pha
	jsr closeall
	jsr err6
	jsr err8
	pla 
	tay 
err7	asl movefl	; Moveflag aus
out2	jsr settab
	jsr ui_gettab
	ldy #3
	jmp gd_xtxout1

; ------------------------------------------------ ERROR

err8	ldx #4
er80	lda ermess,x	; "ERROR" in Titel ausgeben
	sta blocks,x
	dex 
	bpl er80
	ldy #10		; blks anwählen
	bne err7

; ------------------------------------------------ Event: Scroll Source

sevsupdn	lda ls_drive
	cmp sdrive
	beq +
	jmp sevdupdn
+	lda czeile	; Klick-Zeile
	sta merkzl
	lda sdrive
	sta ls_drive
	jsr di4		; show src drive
	lda #indent	; Einrückung des Directorys

destud	sta dspalte
	lda block+$3d
	sta ls_track
	ldy block+$3e	; get # of dir blocks in window
	
	lda merkzl	; wo geklickt?
	cmp #12		; up oder down? (oberhalb Zeile 12?)
	bcs up		; ja, oberhalb

dn	lda #0
	sta dirend
	dec dirwins	; zurückblättern
	dec dirwins
	bmi +		; zu weit? (dann von vorn)
	bne ++
+	lda ls_drive	; (on src?)
	cmp sdrive
	bne ++
	jmp sevsdrive	; ja, Anfang erreicht: von vorn

++	tya		; numblks (bei rückwärts):
	bne sdw4
	ldy #2		; if 0: set 3
sdw4	iny 		; sonst: 2
	tya 
	!by $2c
up	lda #1		; vorwärts: 1
	bit dirend
	bmi sdw12
	pha 		; Anzahl kompletter dirblocks merken

	lda ddrv
	jsr prepdir

	pla 		; zurückholen
	tay 
sdw5	ldx block		; next block: 0?
	dex 
	bne sdw2		; nein

	ldy block+$3f	; yes, so get first block
	inx 
	sty block+1
	bne sdw11

sdw0	dex 
	bne sdw2
	inx 
sdw2	dey 		; .y steuert .x
	bne sdw0
sdw1	ldy block,x

sdw11	lda fftrack,x	; Track merken
	sta ls_track
	stx block		; Block merken

	ldx sdirwin
	stx sc_zl
	inc dirwins	; vorwärts blättern

	ldx #1		; .x *muss* auf 1! .y: Start-Dirblock
	jsr dir4		; System Directory ausführen (bis Fenster voll)
	jsr mal32		; Entry-Nummer berechnen und Vektor setzen
	jsr cudflen	; Länge ausgeben
	jsr svftrack

sdw12	jmp sdir1		; restore system dir (dspalte)

; ------------------------------------------------ Directory of Destination

dirdest	jsr swap		; swap dir records
	stx which
	lda ddrive
	sta ls_drive
	jsr dirinfo
	lda blksfree
	sta disklen
	lda blksfree+1
	sta disklen+1
	ldx block+$3e
	beq sud1
	dex 
	beq sud1
	dex 
	bne sud2
sud1	inx 
sud2	stx block+$3e
	lda #5
	bne sud3

; ------------------------------------------------ Event: Scroll Destination

sevdupdn	jsr swap
sud0	lda czeile	; wo geklickt?

sud3	sta merkzl
	lda ddrive
	sta ls_drive
	jsr di5
	lda #indent	; rechtes Dir-Fenster
	jsr destud
	jmp swap		; re-swap

; ------------------------------------------------ Event: Input Filename

sevfinput	lda #32
	ldy ls_flen	; Filename vorhanden?
	beq fierr		; nein, nothing selected
	iny 
	sta (sc_vekt20),y
	ldy #0
	sta (sc_vekt20),y
ip0	inc sc_vekt20
	bne ip01
	inc sc_vekt20+1
ip01	lda sc_br
	pha 
	lda #17
	sta sc_br
	jsr gd_xinput	; System-Input
	pla 
	sta sc_br
	lda sc_vekt20
	bne ip02
	dec sc_vekt20+1
ip02	dec sc_vekt20
	ldy ls_len
	dey 
	beq fierr
	bmi fierr
	tya 
	sta ls_flen
	clc 
	adc #4
	sta wflen
ip4	ldy #34
ip1	iny 
	lda dirbuffer,y
	cmp #34
	bne ip1
	ldx #$ff
ip2	inx 
	iny 
	lda ls_nambuf,x	; überall eintragen
	sta dirbuffer,y
	sta dollar+2,x
	sta scratch+2,x
	sta wname,x
	cpx ls_flen
	bne ip2
	lda #34
	sta dirbuffer,y
	lda #32
ip6	iny 
	sta dirbuffer,y
	cpy #56
	bne ip6
	ldy #34
	jmp sel6		; anzeigen

; ------------------------------------------------ 

fierr	jmp nothing

; ------------------------------------------------ Event: File Info

sevinfo	ldx #0
	stx sc_keyprs
	lda gd_modswitch
	pha
	jsr ev_info
	pla
	sta gd_modswitch
	lda ui_cacheflg
	beq fierr
-	lda sc_keyprs
	beq -
	jsr ev_cache
	clc
	rts

; ------------------------------------------------ Event: Rename

sevrename	ldy ls_flen
	beq fierr
	sty alen
rn0	lda scratch+1,y	; Namen umtragen für Rename
	sta rename,y
	dey 
	bne rn0
	inc alen
	jsr settab
	ldy #24		; Footer bar ansteuern
	jsr ui_gettab
	ldy #148		; oben: 12
	jsr setptr	; Mauszeiger an die richtige Stelle setzen
	jsr sevfinput	; neuen Namen holen
	lda sy_tbuffer	; Stop?
	cmp #3
	bne +
	jmp cnva6
+	ldy ls_flen
	beq fierr
	ldx #0
rn1	lda rename,x
	sta scratch+2,y	; eintragen
	iny 
	inx 
	cpx alen
	bne rn1
	lda #$52		; "r" (Rename)
	sta scratch
	clc 
	lda alen
	adc ls_flen
	tay 
	jsr nameit	; rename file senden
	lda #$53		; "s" (Scratch)
	sta scratch
	jsr cnva7
	lda #5		; Dspalte?
	sty merkzl
	dec block+$3e
	jmp destud-2	; Ergebnis anzeigen

; ------------------------------------------------ Event: DOS (Input a DOS Command)

sevdos	lda footerwin
	ldx footerwin+1
	ldy footerwin+2
	jsr gd_setpar
	jsr gd_clrline
	ldy #148
	jsr setptr	; Mauszeiger setzen
	lda ls_flen
	pha 
	jsr gd_xinput	; System-Input
	pla 
	sta ls_flen
	ldy ls_len
	dey 
	beq fierr0
	bmi fierr0
	jsr gd_sproff
	tya 
	ldx #<ls_nambuf	; Kommando senden
	ldy #>ls_nambuf
	jsr gd_sendcom
	jmp cnva6		; Floppy-Meldung
fierr0	jmp fierr		; Error: Nothing selected

; ------------------------------------------------ Event: Toggle Panel 2

sevpanels	ldx pantgl	; toggles to 0 or 1
	beq +
	ldx #$ff
+	lda #1
	sta maxblks
	inx
	stx pantgl
	bne +
	lda #$83		; 0: disable Dest Dir
	sta dheader+4
	lda #4
	sta maxblks
	lda #$1e
	ldy #22
	ldx #maxdir	; 0 is full panel 1 (so maxdir=21)
	bne ++
+	lda #$c3		; 1: enable Dest Dir
	sta dheader+4
	lda #$1f
	ldy #17
	ldx #16		; 1 is small panel 1 (so maxdir=16)
++	jsr sq1		; Quit-Anpassungen
	jsr setmax
	jsr uiout		; .x=0
	jsr sevsdrive	; Dir-Inhalt von vorn
	jmp cmpflen	; Längen anzeigen

setmax	sty footer
	sty footerwin
	inc footerwin
	sty blks
	sty btx
	sty drtype
	sty blank
	sty enoth
	sty enosp
	sty eons
	sty eond
	sty eopd
	stx sdirwin+3
	stx sdirwin+10
	stx scroll+3
	stx scrollbar+3
	stx maxdlines
setdls	dex
	dex
	stx ls_dlines
	rts

; ------------------------------------------------ Times 32

mal32	lda #0
	sta ls_vekta8+1
	clc
	ldy dirwins
	beq +
-	dey
	bmi ++
+	adc nexttop,y
	bcc -
	inc ls_vekta8+1
	clc
	bcc -
++	sta ls_vekta8

	lda dirwins	; erster Block?
	bne +
	dec ls_vekta8	; ja, .a minus 1

+	ldy #0
	asl ls_vekta8	; .a mal 32
	rol ls_vekta8+1
	asl ls_vekta8
	rol ls_vekta8+1
	asl ls_vekta8
	rol ls_vekta8+1
	asl ls_vekta8
	rol ls_vekta8+1
	asl ls_vekta8
	rol ls_vekta8+1
	clc
	lda ls_vekta8+1	; Ergebnis in .x (lo) und .a (hi)
	adc #>sy_4bit	; plus Pufferanfang
	sta ls_adrmisc+1
	sty ls_adrmisc
	lda ls_vekta8
	sta ls_index
	jmp initcud	; .y=0

; ------------------------------------------------ Show UI Screen

uiout	ldx #<explrlst	; UI ausgeben
	ldy #>explrlst
	jsr gd_screen	; .a=0

	ldy #22		; Scrollbar färben
	lda #1
	jsr colorize
	ldy #36
	lda #2
	jmp colorize

; ------------------------------------------------ Mauszeiger setzen

setptr	tya 
	clc 
	adc sy_soffy
	sta $d003
	tay 
	dey 
	dey 
	sty $d001
	rts 

; ------------------------------------------------ Dir-Text

setblktx	cmp #4
	bcs +
	ldx #15
	!by $2c
+	ldx #7
	ldy #7
-	lda bltx,x
	sta blktx,y
	sta btxs,y
	dex
	dey
	bpl -
	lda #$43		; C
	sta madeby
	sta drtypetx+1
	ldx ls_drive
	ldy #$3d		; =
	lda ls_cmdtypes-8,x
	beq ++
	cmp #$46		; F
	beq +
	cmp #$48		; H
	beq +
	cmp #$52		; R
	bne ++
+	sta madeby
	sta drtypetx+1
	ldy #$44		; D
++	sty madeby+1
	sty drtypetx+2
	lda ls_units-8,x
	tay
	and #15
	beq +
	ldx #0
	tya
	lsr
	lsr
	lsr
	lsr
	beq ++
	cmp #1
	beq ++
fl70	ora #$30
	!by $2c
+	lda #$34
	sta dtype+2,x
	sta drtypetx+6,x
	rts

++	tay
	lda #7
	jsr fl70
	inx
	tya
	jmp fl70	
	
; ------------------------------------------------ Screenlist

explrlst	!by $93

header	!by 0,0,28,3,$d0		; Src-Dir-Header
	!wo sevsdrive
dskname	!fill 26,32
	!by 0

dheader	!by 20,0,28,3,$83		; Dest-Dir-Header
	!wo sevddrive
ddskname	!fill 26,32
	!by 0

dfooter	!by 22,0,28,3,$8b		; Dest-Dir-Footer (panel 2)
	!wo 0
dbfree	!fill 26,32
	!by 0

footer	!by 22,0,28,3,$d0		; Src-Dir-Footer (panel 1)
	!wo sevfinput
bfree	!fill 6,32
blktx	!scr "bl. free ("
madeby	!scr "C= "		; C= or HD, SD, FD, RD
dtype	!scr "1541)  "		; drive type
	!by 0

scroll	!by 2,25,3,maxdir,$c0	; Scroll-Bar
	!wo sevsupdn
	!scr " "
newlst	!by 0

sdirwin
ddirwin	!by 2,5,18,maxdir,$40	; Dir-Inhalt
	!wo sevselect
dirwin	!by 2,0,28,maxdir,$01	; Dir-Window
	!wo 0

	!by 0,28,4,3,$40		; Driveselect Src
	!wo sevsdslct

sdrv	!by 0,28,12,3,$d0		; Src-Drive (oben)
	!wo sevsdrive
	!fill 9,32
	!by 0

	!by 22,28,4,3,$40		; Driveselect Dst
	!wo sevddslct

ddrv	!by 22,28,12,3,$c0		; Dst-Drive (unten)
	!wo sevddrive
	!fill 9,32
	!by 0

	!by 2,28,6,3,$c3
	!wo stay
	!scr "Run@"

	!by 4,28,6,3,$cb
	!wo sevcopy
	!scr "Copy@"

	!by 6,28,6,3,$cb
	!wo sevmove
	!scr "Move@"

	!by 8,28,6,3,$cb
	!wo sevdel
	!scr "Del@"

	!by 10,28,6,3,$cb
	!wo sevrename
	!scr "Ren@"

	!by 12,28,6,3,$cb
	!wo sevdos
	!scr "Cmd@"

	!by 14,28,6,3,$db
	!wo sevinfo
	!scr "Info@"

	!by 18,28,6,3,$c3	; exchange drives
	!wo sevxdrvs
	!by 32,30,31,32,0

	!by 20,28,6,3,$db	; new panel
	!wo sevpanels
paneltx	!by 32,30,30,32,0

	!by 2,34,6,3,$c3
	!wo sevapps
	!scr "APPs@"

	!by 4,34,6,3,$cb
	!wo sevmods
	!scr "MODs@"

	!by 6,34,6,3,$cb
	!wo stay
	!scr "Ptrn@"

	!by 8,34,6,3,$cb
	!wo stay
	!scr "Part@"

	!by 10,34,6,3,$cb
	!wo stay
	!scr "CDir@"

	!by 12,34,6,3,$cb
	!wo stay
	!scr "All@"

	!by 14,34,6,3,$cb
	!wo stay
	!scr "None@"

	!by 20,34,6,3,$d2
	!wo sevquit
	!scr "Exit@"

	!by $c0,16,34,4		; selected files
	!scr "Tag:@"
	!by $c0
tout	!by 17,34,4,32
tagged	!scr "  0@"
	!by $c0
files	!by 18,34,4,32
filestx	!scr "  0@"
	!by $c0,16,28,4		; Branding
	!scr "U&I!@"
	!by $c0,2,25,1		; Scrollbar
	!by $7e,0
	!by $c0,3,25,1
	!by $7e,0
	!by $c0,4,25,1
	!by $7e,0

	!by $80

scrollbar	!by 2,25,3,maxdir
filesbox	!by 16,33,8,5
fout	!by 18,34,6,3,32
fouttx	!scr "  0@"
footerwin	!by 23,1,26,3
drvrows	!by 3,18

; ------------------------------------------------ Messages

blank	!by 22,0,28,3
	!fill 26,32
	!by 0
enoth	!by 22,0,28,3
	!scr "    Nothing selected.     @"
enosp	!by 22,0,28,3
	!scr "Not enough Space on Dest. @"
eons	!by 22,0,28,3
	!scr "     Error on Source.     @"
eond	!by 22,0,28,3
	!scr "  Error on Destination.   @"
eopd	!by 22,0,28,3
	!scr "Error opening Destination.@"
ermess	!pet "error"

; ------------------------------------------------ Data for DriveInfo
; der dritte Wert wird getrimmt!

blks	!by 22,0,7,3
blocks	!fill 5,32	; Anzahl Blocks
	!by 0
btx	!by 22,6,10,3
btxs	!scr "blocks  @"	; Beitext
drtype	!by 22,15,11,3
drtypetx	!scr "(C= 1541)@"	; Drivetyp

; ------------------------------------------------ Data

adrive	!by 0
aflen	!by 0
alen	!by 0
aswitch	!by 0
osdrive	!by 0
oddrive	!by 0
bltx	!scr "blocks  "	; Alternativtexte bei btxs
	!scr "bl. free"

; ------------------------------------------------ Text Buffers

dollar	!pet "$:"
	!fill 17,32
scratch	!pet "s:"
	!fill 36,32
rename	!pet "="
next	!fill 17,32
wname	!fill 21,32
wtype	!pet ",p,w"
init	!pet "i0"

; ------------------------------------------------ Data

wflen	!by 0
which	!by 0
pic	!pet "pic"
disklen	!wo $ffff
filelen	!wo 0
numfiles	!wo 0
mwrite	!pet "m-w"	; address Floppy $0000, write 1 (means: "ok")
	!by 0,0,1,1
mwlen	!by 7
merkzl	!by 0
afiles	!by 0
movefl	!by 0
list	!wo 0
pantgl	!by 0
maxdlines	!by maxdir

; ------------------------------------------------ 

svftrack	lda ls_index	; index in dir of next top entry (offset/32)
	lsr
	lsr
	lsr
	lsr
	lsr
	sta stmerk
	sec
	lda ls_dlines
	sbc stmerk
	ldx dirwins
	sta nexttop,x
	bne +
	dec nexttop,x

+	ldx #64
cdp2	lda ftrack-1,x	; Chain of Tracks in Dir Window
	sta fftrack-1,x	; save it
	dex 
	bne cdp2
	rts 

; ------------------------------------------------ Get System Dir Sector Chain

chkdrvpar	ldx #192
	jsr cdp2
	lda sdrive
	cmp ddrive
	bne cdp0
	ldx #$3f
cdp1	lda block,x
	sta block+$40,x
	dex 
	bpl cdp1
	lda ls_cblocks
	sta block+$3e
	sta block+$5e
	lda ls_first
	sta block+$3f
	sta block+$5f
	lda ls_track
	sta block+$3d
	sta block+$5d
cdp0	rts 

; ------------------------------------------------ Swap Chain for Destination Drive

swap	ldx #31
sw0	lda block,x
	tay 
	lda block+$40,x
	sta block,x
	tya 
	sta block+$40,x
	lda fftrack,x
	tay 
	lda fftrack+$40,x
	sta fftrack,x
	tya 
	sta fftrack+$40,x
	dex 
	bpl sw0
	clc 
	rts 

; ------------------------------------------------ Compute Gauge Counter for Copy

steps	sta $62
	stx $63
	lsr $62
	ror $63
	lsr $62
	ror $63
	lsr $62
	ror $63
	lsr $62
	ror $63
	lda $63
	jsr gd_xcnvdez
	inx 
	txa 
	and #15
	sta cntwert
	sta counter
chk0	rts 

; ------------------------------------------------ Patch 1541 Job Bug

check41	ldx ls_drive
	lda devs,x
	and #$f0
	cmp #$40
	bne cdp0
	ldx #<mwrite	; m-w 0 0 1 1 (1 nach $0000)
	ldy #>mwrite	; means: job for buffer 0 returns ok
	lda mwlen
	jmp gd_sendcom

; ------------------------------------------------ Activity Handler

messout	ldx #<(message)
	ldy #>(message)
	jmp gd_xtxout2

tcopy	ldy #0
tc0	lda txt,x
	beq clrmess
	sta message,y
	inx 
	iny 
	bne tc0

action	inc blcnt		; übertragene Blöcke zählen
	bne ac0
	inc blcnt+1
ac0	dec counter	; Gauge counter
	bne ld4

	lda cntwert	; abgelaufen, neu setzen
	sta counter
	ldy #3
ac2	lda sc_descriptor,y	; Screen descriptor retten
	pha 
	dey 
	bpl ac2
	ldx blcnt		; Block Counter in Ziffern wandeln
	lda blcnt+1
	jsr cntbl
	ldx #5
	dey 
ac1	lda sy_numbers,y	; und in Message eintragen
	sta message,x
	dex 
	dey 
	bpl ac1
	ldy #0
ac4	pla 
	sta sc_descriptor,y	; Screen descriptor rekonstruieren
	iny 
	cpy #4
	bne ac4
	ldy offy
	cpy #20
	bne +
	jsr clrmess
+	ldx offx
	lda filltab,x	; Gauge-Balken verlängern
	sta mess,y
	jsr messout	; Gauge ausgeben
	dec offx		; Zähler ggf. resetten
	bpl ld4
	inc offy
	lda #7
	sta offx
ld4	rts 

clrmess	ldx #19
	lda #32
cl0	sta mess,x
	dex 
	bpl cl0
	ldy #0
	ldx #7
	sty offy
	stx offx
	rts 

filltab	!by 160,93,103,127,126,124,105,109

cntwert	!by 1

txt	!scr "C:    @"
	!scr "M:    @"

message	!fill 6,32
mess	!fill 20,32
	!by 0

; ------------------------------------------------ 

modend	!eof

; ------------------------------------------------ 


