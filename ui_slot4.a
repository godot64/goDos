
!src "..\godoslib.lib"
*= $c000

; -------------------------------------------------- 
;
; U&I Slot4
; Upmem fraction of goDos kernel
;
; 0.99, 14.08.17, removed Palette, Balancing, Guru, Dither Mode and Clip Status
;                 added Input
; 0.01, 27.08,17, added: FileInfo for Explorer
; 0.02, 29.08.17, added: Screen Cache
; 0.03, 01.09.17, removed Preview
; 0.04, 10.09.17, changed: Text Ouput Handler (now in Kernal)
;
; -------------------------------------------------- Declarations

	infosp		= 18		; Konstanten
	lrlimit		= 29

	pport		= $01		; usually $36

	passover		= $30		; /$31

	czeile		= sc_merk
	cspalte		= czeile+1
	amrk		= ls_adrmisc	; lo/hi

	sprptr		= $07fa

	spr2		= $3e80
	spr5		= $3f40

	dbuf		= $bf00

	sprxy		= $d004
	xmsb		= $d010
	sprreg		= $d015
	yexp		= $d017
	sprpri		= $d01b
	sprmulti		= $d01c
	xexp		= $d01d
	sprcol2		= $d025
	sprcol3		= $d026
	sprcol1		= $d029

; ------------------------------------------------ 

	vram		= $0400
	cram		= $d800
	ui_vcache		= $b500
	ui_ccache		= $b900

; ------------------------------------------------ 

	fileopen		= $1c9e
	fileclose		= $1b12
	buffer		= $cd00		; transport buffer (1 block)

; -------------------------------------------------- Header

	jmp start
	!by $20
	!wo 0
	!wo modend
	!wo 0
	!pet "goDos f000 slot4"
created	!pet "0.04"
	!pet "10.09.17"
	!pet "A.Dettke        "

; -------------------------------------------------- Module Management

start	ldx sc_screenvek	; save vector to main screen screenlist
	stx list
	ldx sc_screenvek+1
	stx list+1

	ldx gr_nr		; get function number
	beq leave		; 0: not used
	dex
	beq jinput	; 1: Input
	dex
	beq jevcache	; 2: Cache Screen
	dex
	beq leave		; 3: not used
	dex
	beq leave		; 4: not used
	dex
	beq jevinfo	; 5: File Info
	dex
	beq jdrvslct	; 6: Drive Select
	dex
	beq leave		; 7: not used

leave	clc
	rts

jinput	jmp initinp

jevcache	jmp evcache

jdrvslct	jsr evdrvslct
	bcs listback 

jevinfo	jsr evinfo

listback	lda list
	sta sc_screenvek
	lda list+1
	sta sc_screenvek+1
	rts

list	!wo 0

; -------------------------------------------------- 
; -------------------------------------------------- Event: File Info
; -------------------------------------------------- 

; ------------------------------------------------ FileInfo: Read First Block

evinfo	jsr gd_sproff	; get filename
	lda #<ls_nambuf
	sta ls_vekta8
	lda #>ls_nambuf
	sta ls_vekta8+1
	ldx ls_flen
	bne +
	jmp err7		; no file selected

+	stx ls_temp
	jsr fileopen
	bcc +
	jmp err6

+	ldx #0		; get one block
-	jsr basin
	sta buffer,x
	inx
	bit status
	bvs +
	txa
	bne -
+	jsr clrch
	jsr err6

; ------------------------------------------------ FileInfo: Show 

info	stx ui_cacheflg	; .x=0, cache flag auf 0
	jsr evcache	; und Screen cachen
	ldx #<infolst	; open info requester
	ldy #>infolst
	jsr gd_screen
	
	jsr settab

	ldx #0
	stx xcnt		; Type-Index auf 0
	stx lcnt		; Zeilenzähler auf 0
	stx bufoff

	ldx buffer
	stx strtadr
	lda buffer+1	; file=device?
	sta strtadr+1
	cmp #$ca
	bne +
	cpx #$64
	bne ++
	lda #$4c		; ja, anderer Offset
	sta bufoff
++	ldx #3
	stx xcnt
	bne ++

+	cmp #$c0		; Startadresse $c000?
	beq +
-	jmp other
+	lda buffer+2
	cmp #$4c		; beginnt mit JMP?
	bne -

	lda buffer+5	; Type
-	asl
	bcc +
	stx xcnt
+	inx
	cpx #5
	bcc -

++	ldy #15
	lda #12
	jsr txf1
	ldy #2		; Name out
	jsr fio1

	ldx xcnt
	lda type_o,x
	tax
	jsr fi_fill
	ldy #15
	lda #<godtx
	ldx #>godtx
	jsr txf2
	ldy #0		; Type out
	jsr fi_out

	ldy #15
	lda #16
	jsr txf1
	ldy #11
	lda #<verstx
	ldx #>verstx
	jsr txf2
	ldy #4		; Version out
	jsr fi_out
	
	ldy #15
	lda #24
	jsr txf1
	lda #<datetx
	ldx #>datetx
	ldy #7
	jsr txf2
	ldy #6		; Date out
	jsr fi_out
	
	ldy #13
	lda #<lentx
	ldx #>lentx
	jsr txf2
	ldx buffer+8
	lda buffer+9
	and #$3f
	jsr cntbl
	ldx #15
	dey
-	lda sy_numbers,y
	sta fouttx,x
	dex
	dey
	bpl -
	ldy #10		; Length out
	jsr fi_out
	
	ldy #15
	lda #40
	jsr txf1
	ldy #8		; Author out

; ------------------------------------------------ 

fi_out	inc lcnt
fio1	ldx lcnt
fio2	lda txoffs,x
	sta offout
	jsr ui_gettab	; .y: Offset auf Record-Adresse
	jsr cnvbc
	ldy offout	; .y: Offset auf Textadresse
	jmp gd_xtxout1
	
; ------------------------------------------------ 

fi_fill	ldy #2
-	lda type_s,x
	sta godtx,y
	lda type_t,x
	sta godtx+12,y
	dex
	dey
	bpl -
	rts

tx_fill	ldy #7
txf1	clc
	adc bufoff
	ldx #>buffer
txf2	sta amrk
	stx amrk+1
-	lda (amrk),y
	sta fouttx,y
	dey
	bpl -
	rts

; ------------------------------------------------ 

cnvbc	ldx #15
-	lda fouttx,x
	beq +
	eor #$e0
	clc
	adc #32
	bpl +
	adc #64
	bpl +
	eor #$a0
+	sta fouttx,x
	dex
	bpl -
	rts

; ------------------------------------------------ 

cntbl	sta $62
	stx $63
	lda #$37		; BASIC on
	sta pport
	ldx #$90
	sec 
	jsr $bc49
	jsr $bddf
	dec pport		; BASIC off
	ldy #6
di2	dey 
	lda sy_numbers,y
	bne di2
	rts 

; ------------------------------------------------ 

other	ldx #15
	lda #32
-	sta fouttx,x
	dex
	bpl -
	lda #<ls_nambuf
	ldx #>ls_nambuf+1
	ldy ls_flen
	dey
	jsr txf2
	jsr cnvbc
	ldy #2
	jsr fio1		; Filename out
	ldy #13
	lda #<strttx
	ldx #>strttx
	jsr txf2
	ldx strtadr
	lda strtadr+1
	jsr cntbl
	ldx #15
	dey
-	lda sy_numbers,y
	sta fouttx,x
	dex
	dey
	bpl -
	ldx #1
	ldy #0		; Startadress out
	jmp fio2

; ------------------------------------------------ on ERROR

err6	jsr fileclose
err7	jmp gd_spron

; ------------------------------------------------ Text Output Handler

settab	lda #<(tabigad)
	sta sc_texttab
	lda #>(tabigad)
	sta sc_texttab+1
	rts 

tabigad	!wo godout	;  0 Fileinfo: which Type
	!wo nam2out	;  2 Fileinfo: which Name
	!wo versout	;  4 Fileinfo: Version
	!wo dateout	;  6 Fileinfo: Date
	!wo aut2out	;  8 Fileinfo: which Author
	!wo lenout	; 10 Fileinfo: Length
	!wo tl1		; 12 Drvselect: Colors

; ------------------------------------------------ Screenlist

infolst	!by $00
	!by 5,infosp,18,10,$40
	!wo leave
	!by $80

; ------------------------------------------------ Data for Info

type_s	!pet "DEVUNISYSAPP"
type_t	!pet "DEVMODSVRLDR"
type_o	!by 11,8,5,2
txoffs	!by 3,7,11,15,19,23
aut2out	!by 12,infosp,18,3
lenout	!by 10,infosp,18,3
dateout	!by 9,infosp,18,3
versout	!by 8,infosp,18,3
godout	!by 6,infosp,18,3
nam2out	!by 5,infosp,18,3
fouttx	!fill 16,32
	!by 0
godtx	!pet "xxx (GoDot: xxx)"
datetx	!pet "Date:   "
verstx	!pet "Version:    "
lentx	!pet "Length:       "
strttx	!pet "Start:        "
strtadr	!wo 0
xcnt	!by 0
lcnt	!by 0
bufoff	!by 0
offout	!by 0

; -------------------------------------------------- 
; -------------------------------------------------- Event: Cache Screen
; -------------------------------------------------- 

; This routine will cache the complete textscreen and their colors
; to $b500 (up to $bcff). If you have something to cache, you just
; call ev_display from main, or go jsr evcache from within Slot4.
; First call caches, next call uncaches. Be sure to set ui_cacheflg 
; to $00 before first call.

evcache	ldy ui_cacheflg
	bmi cc1

	lda #>vram
	ldx #>ui_vcache
	jsr swap
	lda #>cram
	ldx #>ui_ccache
	jsr swap
	dey
	bmi cc2

cc1	lda #>ui_vcache
	ldx #>vram
	jsr swap
	lda #>ui_ccache
	ldx #>cram
	jsr swap

cc2	sty ui_cacheflg
	rts

swap	sta ls_vekta8+1
	txa
	sta sc_pos+1
	ldy #0
	sty ls_vekta8
	sty sc_pos
	ldx #4
-	lda (ls_vekta8),y
	sta (sc_pos),y
	iny
	bne -
	inc ls_vekta8+1
	inc sc_pos+1
	dex
	bne -
	rts


; -------------------------------------------------- 
; -------------------------------------------------- Event: Select Drive
; -------------------------------------------------- 

; ------------------------------------------------ FileInfo: Show 

evdrvslct	ldx passover
	stx tl1
	inx
	stx tl2
	stx dsline

	ldx #0
	stx ui_cacheflg	; .x=0, cache flag auf 0
	jsr evcache	; und Screen cachen
	ldx #<drvlst	; open drv requester
	ldy #>drvlst
	jsr gd_screen

	ldy #12		; umfärben
	jsr settab
	jsr ui_gettab
	ldx #2
	jsr gd_fcol

	lda passover+1	; Hilight active Drive:
	and #3		; Drivenummer minus 8 als Index
	tax 
	sec 
	lda sc_vekt20
	sbc off,x
	sta sc_vekt20
	bcs os2
	dec sc_vekt20+1
os2	ldy #0
	ldx #2		; Hilite-Farbe anwählen
	lda sc_shadow+1,x
os3	sta (sc_vekt20),y	; und direkt in den Screen
	iny 
	dex 
	bne os3
	jmp gd_eloop

sevdrive	ldy #8		; dr8
	lda dsline	; oben geklickt?
	cmp czeile
	beq +		; nein, unten, Sprung
	ldy #10		; unten: dr10
+	lda #lrlimit	; lrlimit = [tl1+1]+3
	cmp cspalte
	bcs +
	iny		; rechts: dr9, dr11
+	sty passover+1	; neuer Drive in .y
	sec
	rts

drvlst	!by $00
tl1	!by 3,26,7,4,$f0
	!wo sevdrive
	!scr " 8  9@"
	!by $c0
tl2	!by 4,26,5
	!scr "10 11@"
	!by $80

dsline	!by 0
off	!by 80,77,40,37

; --------------------------- 
; --------------------------- Input Routines

!src "..\input.inc"

; --------------------------- 
; --------------------------- 

; -------------------------------------------------- 

modend	!eof		; end of upmem routines
